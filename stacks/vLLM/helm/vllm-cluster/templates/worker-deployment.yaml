apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.worker.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.worker.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.worker.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.worker.name }}
    spec:
      containers:
        - name: {{ .Values.worker.name }}
          image: "{{ .Values.worker.image.repository }}:{{ .Values.worker.image.tag }}"
          imagePullPolicy: {{ .Values.worker.image.pullPolicy }}
          livenessProbe:
            initialDelaySeconds: 15
            periodSeconds: 20
            failureThreshold: 3
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  python -c '
import ray
try:
    ray.init(address="auto")
    assert any(n["Alive"] for n in ray.nodes())
except:
    exit(1)
'
          ports:
            - containerPort: 10001
          resources:
            limits:
              nvidia.com/gpu: {{ .Values.worker.resources.limits.gpu }}
              cpu: {{ .Values.worker.resources.limits.cpu | quote }}
              memory: {{ .Values.worker.resources.limits.memory | quote }}
            requests:
              nvidia.com/gpu: {{ .Values.worker.resources.requests.gpu }}
              cpu: {{ .Values.worker.resources.requests.cpu | quote }}
              memory: {{ .Values.worker.resources.requests.memory | quote }}
          env:
            - name: RAY_HEAD_SERVICE_HOST
              value: {{ .Values.worker.rayHeadHost | quote }}
            - name: RAY_HEAD_SERVICE_PORT
              value: {{ .Values.worker.rayHeadPort | quote }}
          volumeMounts:
            - name: model-storage
              mountPath: {{ .Values.worker.volumeMount.mountPath }}
      volumes:
        - name: model-storage
          persistentVolumeClaim:
            claimName: {{ .Values.worker.volumeMount.pvcName }}
