apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: vllm-api
  namespace: default
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/target: "2"                   # Each pod handles 2 requests
        autoscaling.knative.dev/minScale: "0"                 # Allow scale-to-zero
        autoscaling.knative.dev/maxScale: "5"                 # Max 5 pods
        autoscaling.knative.dev/class: "kpa.autoscaling.knative.dev"
        autoscaling.knative.dev/metric: "concurrency"
        autoscaling.knative.dev/scaleToZeroPodRetentionPeriod: "10m"  # Optional: Keep last pod warm for 10m
    spec:
      timeoutSeconds: 600                                     # Optional: 10 min request timeout
      containerConcurrency: 2                                 # Hard cap of 2 concurrent requests/pod
      terminationGracePeriodSeconds: 600                      # Graceful shutdown: 10 mins
      nodeSelector:
        workload: rayWorkerAndAPI
      tolerations:
        - key: "kubernetes.azure.com/scalesetpriority"
          operator: "Equal"
          value: "spot"
          effect: "NoSchedule"
      containers:
        - name: vllm-api
          image: vllm/vllm-openai:v0.9.1
          command: ["/bin/bash", "-c"]
          args:
            - |
              pip install ray[client]==2.47.1 && \
              ray start --address=vllm-head.default.svc.cluster.local:6379 --num-cpus 36 && \
              sleep 5 && pip install transformers==4.52.0 && \
              REQUIRED_NODES=$((1 + 2)) \
              && echo "Waiting for $REQUIRED_NODES Ray nodes in cluster..." \
              && while true; do \
                  NODE_COUNT=$(ray status | grep -i "node_" | wc -l); \
                  if [ "$NODE_COUNT" -ge "$REQUIRED_NODES" ]; then \
                      echo "Ray cluster has $NODE_COUNT nodes, proceeding."; \
                      break; \
                  else \
                      echo "Ray cluster only has $NODE_COUNT nodes, waiting..."; \
                      sleep 10; \
                  fi; \
              done && \
              echo "Starting vLLM..." && \
              MASTER_ADDR=0.0.0.0 MASTER_PORT=29500 vllm serve \
              /models/llms/Qwen3-30B-A3B-Thinking-2507-AWQ-4bit \
                --enable-expert-parallel \
                --host 0.0.0.0 \
                --port 8000 \
                --swap_space 100 \
                --served-model-name "Qwen3-30B-A3B-Thinking-2507-AWQ-4bit" \
                --distributed-executor-backend "ray" \
                --tensor-parallel-size 1 \
                --pipeline_parallel-size 1 \
                --data-parallel-size 2 \
                --data-parallel-size-local 1 \
                --data-parallel-address 0.0.0.0 \
                --gpu-memory-utilization 0.8 \
                --max-num-seqs 6 \
                --max-model-len 32768
          ports:
            - containerPort: 8000
          resources:
            requests:
              nvidia.com/gpu: 1
            limits:
              nvidia.com/gpu: 1
          volumeMounts:
            - name: hf-cache
              mountPath: /root/.cache/huggingface
            - name: shm
              mountPath: /dev/shm
            - name: blob-models
              mountPath: /models/llms
              readOnly: true
      volumes:
        - name: hf-cache
          emptyDir: {}
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 100Gi
        - name: blob-models
          persistentVolumeClaim:
            claimName: azure-blob-model-pvc
